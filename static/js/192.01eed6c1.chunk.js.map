{"version":3,"file":"static/js/192.01eed6c1.chunk.js","mappings":"8KAGsBA,EAAtB,Y,4BAGgBC,Q,MAAkD,MAAlDA,kB,6BAEPA,kBAAoBA,E,oHASjBC,WAAAA,SAAWC,G,KAIdC,KAAKC,EAAAA,EAAAA,OAAuBF,I,EAGzBG,UAAAA,SAAUC,G,KAIbH,KAAKC,EAAAA,EAAAA,MAAsBE,I,EAGxBC,eAAAA,W,KAIHJ,KAAKC,EAAAA,EAAAA,a,EAhCd,CAAgDI,EAAAA,e,8ECOnCC,EAAb,Y,QAQE,c,MAAcC,EAAAA,EAAAA,Q,IAASC,YAAAA,OAAAA,IAAc,KAAAC,E,IAAIC,mBAAAA,OAAAA,IAAqB,KAAAC,E,IAAIC,aAAAA,OAAAA,IAAe,KAAAC,E,OAC/EC,EAAAA,EAAAA,KAAAA,KAAM,CAAEjB,kBAAmB,CAACU,MAA5B,MAEKA,QAAUA,EACfO,EAAKN,YAAcA,EACnBM,EAAKJ,mBAAqBA,EAC1BI,EAAKF,aAAeA,E,IAdxBG,G,EAAAA,G,6EAAA,yBAAAC,EAiBeC,SAjBf,e,wCAwB0BC,EAAKC,MAAMC,MAAMF,EAAKN,cAAcS,MAAK,SAACC,GAAD,OAAgCA,EAAS,OAAlF,eAAhBC,GAEN,MAAO,CAAEC,SAAUN,EAAKC,MAAMK,SAAUD,QAAAA,O,EARnCE,K,iBAAAP,EAAKC,M,uBACY,gEAAiCE,MAAK,SAAAK,GAAC,4BAAIA,OAAJ,EAAIA,EAAC,SAAL,EAAkBA,MAAzD,eAAdC,G,OACNT,EAAKC,MAAQ,IAAIQ,EAAMT,EAAKR,oB,gBACtBQ,EAAKC,MAAMS,KAAKV,EAAKV,cAArB,wB,mDArBZ,MAAAqB,GAAA,sBAAAA,KAAAb,EA6Bec,YA7Bf,eA8BI,OAAO,QAAP,QAAOL,KAAKN,MAAMK,UA9BtB,MAAAK,GAAA,sBAAAA,KAAAb,EAiCee,WAjCf,eAkCI,OAAO,QAAP,QAAON,KAAKlB,SAlChB,MAAAsB,GAAA,sBAAAA,KAAAb,EAqCegB,WArCf,eAsCI,OAAO,QAAP,QAAOP,KAAKN,MAAMc,SAASC,KAAK,gBAAgBb,MAAK,SAACC,GAAD,OAAgCA,EAAS,OAtClG,MAAAO,GAAA,sBAAAA,KAAAb,EAyCemB,WAzCf,W,0BAAAnB,EA2CeoB,MA3Cf,e,MA4CUX,K,uBAAAY,EAAKlB,MAAMmB,WAAX,iBACND,EAAKjC,oBA7CT,MAAAyB,GAAA,sBAAAA,KAAA,G,SAAoCjC","sources":["../node_modules/@web3-react/abstract-connector/src/index.ts","../node_modules/@web3-react/torus-connector/src/index.ts"],"sourcesContent":["import { EventEmitter } from 'events'\nimport { AbstractConnectorArguments, ConnectorUpdate, ConnectorEvent } from '@web3-react/types'\n\nexport abstract class AbstractConnector extends EventEmitter {\n  public readonly supportedChainIds?: number[]\n\n  constructor({ supportedChainIds }: AbstractConnectorArguments = {}) {\n    super()\n    this.supportedChainIds = supportedChainIds\n  }\n\n  public abstract async activate(): Promise<ConnectorUpdate>\n  public abstract async getProvider(): Promise<any>\n  public abstract async getChainId(): Promise<number | string>\n  public abstract async getAccount(): Promise<null | string>\n  public abstract deactivate(): void\n\n  protected emitUpdate(update: ConnectorUpdate): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Update}' with payload`, update)\n    }\n    this.emit(ConnectorEvent.Update, update)\n  }\n\n  protected emitError(error: Error): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Error}' with payload`, error)\n    }\n    this.emit(ConnectorEvent.Error, error)\n  }\n\n  protected emitDeactivate(): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Deactivate}'`)\n    }\n    this.emit(ConnectorEvent.Deactivate)\n  }\n}\n","import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\ninterface TorusConnectorArguments {\n  chainId: number\n  initOptions?: any\n  constructorOptions?: any\n  loginOptions?: any\n}\n\nexport class TorusConnector extends AbstractConnector {\n  private readonly chainId: number\n  private readonly initOptions: any\n  private readonly constructorOptions: any\n  private readonly loginOptions: any\n\n  public torus: any\n\n  constructor({ chainId, initOptions = {}, constructorOptions = {}, loginOptions = {} }: TorusConnectorArguments) {\n    super({ supportedChainIds: [chainId] })\n\n    this.chainId = chainId\n    this.initOptions = initOptions\n    this.constructorOptions = constructorOptions\n    this.loginOptions = loginOptions\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.torus) {\n      const Torus = await import('@toruslabs/torus-embed').then(m => m?.default ?? m)\n      this.torus = new Torus(this.constructorOptions)\n      await this.torus.init(this.initOptions)\n    }\n\n    const account = await this.torus.login(this.loginOptions).then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.torus.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.torus.provider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.torus.ethereum.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public async deactivate() {}\n\n  public async close() {\n    await this.torus.cleanUp()\n    this.emitDeactivate()\n  }\n}\n"],"names":["AbstractConnector","supportedChainIds","emitUpdate","update","emit","ConnectorEvent","emitError","error","emitDeactivate","EventEmitter","TorusConnector","chainId","initOptions","_ref$initOptions","constructorOptions","_ref$constructorOptio","loginOptions","_ref$loginOptions","_this","_inheritsLoose","_proto","activate","_this3","torus","login","then","accounts","account","provider","this","m","Torus","init","e","getProvider","getChainId","getAccount","ethereum","send","deactivate","close","_this11","cleanUp"],"sourceRoot":""}