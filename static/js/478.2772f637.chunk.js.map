{"version":3,"file":"static/js/478.2772f637.chunk.js","mappings":"8KAGsBA,EAAtB,Y,4BAGgBC,Q,MAAkD,MAAlDA,kB,6BAEPA,kBAAoBA,E,oHASjBC,WAAAA,SAAWC,G,KAIdC,KAAKC,EAAAA,EAAAA,OAAuBF,I,EAGzBG,UAAAA,SAAUC,G,KAIbH,KAAKC,EAAAA,EAAAA,MAAsBE,I,EAGxBC,eAAAA,W,KAIHJ,KAAKC,EAAAA,EAAAA,a,EAhCd,CAAgDI,EAAAA,e,uGCChD,IAAMC,EAAkD,CACtD,EAAG,UACH,EAAG,UACH,EAAG,UACH,GAAI,SAQOC,EAAb,Y,QAME,c,MAAcC,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,Q,OACVC,OAAOC,KAAKL,GAAkBM,SAASH,EAAQI,cAAzD,QAAU,IACVC,EAAAA,EAAAA,KAAAA,KAAM,CAAEjB,kBAAmB,CAACY,MAA5B,MAEKD,OAASA,EACdM,EAAKL,QAAUA,E,IAXnBM,G,EAAAA,G,6EAAA,yBAAAC,EAceC,SAdf,e,wCAuB0BC,EAAKC,UACxBC,cACAC,SACAC,MAAK,SAACC,GAAD,OAAgCA,EAAS,OAH3B,eAAhBC,GAKN,MAAO,CAAEC,SAAUP,EAAKC,UAAUC,cAAeX,QAASS,EAAKT,QAASe,QAAAA,O,EAbnEE,K,iBAAAR,EAAKC,U,uBACgB,oCAAoBG,MAAK,SAAAK,GAAC,4BAAIA,OAAJ,EAAIA,EAAC,SAAL,EAAkBA,MAA5C,eAAlBC,GACNV,EAAKC,UAAY,IAAIS,EACnBV,EAAKV,OACY,IAAjBU,EAAKT,SAAkC,IAAjBS,EAAKT,aAAgBoB,EAAYvB,EAAiBY,EAAKT,a,mDAnBrF,MAAAqB,GAAA,sBAAAA,KAAAd,EA+BeI,YA/Bf,eAgCI,OAAO,QAAP,QAAOM,KAAKP,UAAUC,eAhC1B,MAAAU,GAAA,sBAAAA,KAAAd,EAmCee,WAnCf,eAoCI,OAAO,QAAP,QAAOL,KAAKjB,SApChB,MAAAqB,GAAA,sBAAAA,KAAAd,EAuCegB,WAvCf,eAwCI,OAAO,QAAP,QAAON,KAAKP,UACTC,cACAa,KAAK,gBACLX,MAAK,SAACC,GAAD,OAAgCA,EAAS,OA3CrD,MAAAO,GAAA,sBAAAA,KAAAd,EA8CSkB,WAAA,aA9CTlB,EAgDemB,MAhDf,e,MAiDUT,K,uBAAAU,EAAKjB,UAAUkB,KAAKC,UAApB,iBACNF,EAAKhC,oBAlDT,MAAA0B,GAAA,sBAAAA,KAAA,GAAwClC,EAAAA","sources":["../node_modules/@web3-react/abstract-connector/src/index.ts","../node_modules/@web3-react/fortmatic-connector/src/index.ts"],"sourcesContent":["import { EventEmitter } from 'events'\nimport { AbstractConnectorArguments, ConnectorUpdate, ConnectorEvent } from '@web3-react/types'\n\nexport abstract class AbstractConnector extends EventEmitter {\n  public readonly supportedChainIds?: number[]\n\n  constructor({ supportedChainIds }: AbstractConnectorArguments = {}) {\n    super()\n    this.supportedChainIds = supportedChainIds\n  }\n\n  public abstract async activate(): Promise<ConnectorUpdate>\n  public abstract async getProvider(): Promise<any>\n  public abstract async getChainId(): Promise<number | string>\n  public abstract async getAccount(): Promise<null | string>\n  public abstract deactivate(): void\n\n  protected emitUpdate(update: ConnectorUpdate): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Update}' with payload`, update)\n    }\n    this.emit(ConnectorEvent.Update, update)\n  }\n\n  protected emitError(error: Error): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Error}' with payload`, error)\n    }\n    this.emit(ConnectorEvent.Error, error)\n  }\n\n  protected emitDeactivate(): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Deactivate}'`)\n    }\n    this.emit(ConnectorEvent.Deactivate)\n  }\n}\n","import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  42: 'kovan'\n}\n\ninterface FortmaticConnectorArguments {\n  apiKey: string\n  chainId: number\n}\n\nexport class FortmaticConnector extends AbstractConnector {\n  private readonly apiKey: string\n  private readonly chainId: number\n\n  public fortmatic: any\n\n  constructor({ apiKey, chainId }: FortmaticConnectorArguments) {\n    invariant(Object.keys(chainIdToNetwork).includes(chainId.toString()), `Unsupported chainId ${chainId}`)\n    super({ supportedChainIds: [chainId] })\n\n    this.apiKey = apiKey\n    this.chainId = chainId\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.fortmatic) {\n      const Fortmatic = await import('fortmatic').then(m => m?.default ?? m)\n      this.fortmatic = new Fortmatic(\n        this.apiKey,\n        this.chainId === 1 || this.chainId === 4 ? undefined : chainIdToNetwork[this.chainId]\n      )\n    }\n\n    const account = await this.fortmatic\n      .getProvider()\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.fortmatic.getProvider(), chainId: this.chainId, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.fortmatic.getProvider()\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.fortmatic\n      .getProvider()\n      .send('eth_accounts')\n      .then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {}\n\n  public async close() {\n    await this.fortmatic.user.logout()\n    this.emitDeactivate()\n  }\n}\n"],"names":["AbstractConnector","supportedChainIds","emitUpdate","update","emit","ConnectorEvent","emitError","error","emitDeactivate","EventEmitter","chainIdToNetwork","FortmaticConnector","apiKey","chainId","Object","keys","includes","toString","_this","_inheritsLoose","_proto","activate","_this3","fortmatic","getProvider","enable","then","accounts","account","provider","this","m","Fortmatic","undefined","e","getChainId","getAccount","send","deactivate","close","_this11","user","logout"],"sourceRoot":""}