{"version":3,"file":"static/js/915.902dfe3b.chunk.js","mappings":"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","sources":["../node_modules/@web3-react/abstract-connector/src/index.ts","../node_modules/@web3-react/walletconnect-connector/src/index.ts"],"sourcesContent":["import { EventEmitter } from 'events'\nimport { AbstractConnectorArguments, ConnectorUpdate, ConnectorEvent } from '@web3-react/types'\n\nexport abstract class AbstractConnector extends EventEmitter {\n  public readonly supportedChainIds?: number[]\n\n  constructor({ supportedChainIds }: AbstractConnectorArguments = {}) {\n    super()\n    this.supportedChainIds = supportedChainIds\n  }\n\n  public abstract async activate(): Promise<ConnectorUpdate>\n  public abstract async getProvider(): Promise<any>\n  public abstract async getChainId(): Promise<number | string>\n  public abstract async getAccount(): Promise<null | string>\n  public abstract deactivate(): void\n\n  protected emitUpdate(update: ConnectorUpdate): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Update}' with payload`, update)\n    }\n    this.emit(ConnectorEvent.Update, update)\n  }\n\n  protected emitError(error: Error): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Error}' with payload`, error)\n    }\n    this.emit(ConnectorEvent.Error, error)\n  }\n\n  protected emitDeactivate(): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Deactivate}'`)\n    }\n    this.emit(ConnectorEvent.Deactivate)\n  }\n}\n","import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport { IWalletConnectProviderOptions } from '@walletconnect/types'\n\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\n\nexport interface WalletConnectConnectorArguments extends IWalletConnectProviderOptions {\n  supportedChainIds?: number[]\n}\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\nfunction getSupportedChains({ supportedChainIds, rpc }: WalletConnectConnectorArguments): number[] | undefined {\n  if (supportedChainIds) {\n    return supportedChainIds\n  }\n\n  return rpc ? Object.keys(rpc).map(k => Number(k)) : undefined\n}\n\nexport class WalletConnectConnector extends AbstractConnector {\n  private readonly config: WalletConnectConnectorArguments\n\n  public walletConnectProvider?: any\n\n  constructor(config: WalletConnectConnectorArguments) {\n    super({ supportedChainIds: getSupportedChains(config) })\n\n    this.config = config\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleDisconnect = this.handleDisconnect.bind(this)\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n\n  private handleDisconnect(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'disconnect' event\")\n    }\n    this.emitDeactivate()\n    // we have to do this because of a @walletconnect/web3-provider bug\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop()\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider = undefined\n    }\n\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletConnectProvider) {\n      const WalletConnectProvider = await import('@walletconnect/web3-provider').then(m => m?.default ?? m)\n      this.walletConnectProvider = new WalletConnectProvider(this.config)\n    }\n\n    // ensure that the uri is going to be available, and emit an event if there's a new uri\n    if (!this.walletConnectProvider.wc.connected) {\n      await this.walletConnectProvider.wc.createSession({\n        chainId: this.supportedChainIds && this.supportedChainIds.length > 0 ? this.supportedChainIds[0] : 1\n      })\n      this.emit(URI_AVAILABLE, this.walletConnectProvider.wc.uri)\n    }\n\n    const account = await this.walletConnectProvider\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n      .catch((error: Error): void => {\n        // TODO ideally this would be a better check\n        if (error.message === 'User closed modal') {\n          throw new UserRejectedRequestError()\n        }\n\n        throw error\n      })\n\n    this.walletConnectProvider.on('disconnect', this.handleDisconnect)\n    this.walletConnectProvider.on('chainChanged', this.handleChainChanged)\n    this.walletConnectProvider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.walletConnectProvider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.walletConnectProvider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.walletConnectProvider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.walletConnectProvider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop()\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect)\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n    }\n  }\n\n  public async close() {\n    await this.walletConnectProvider?.close()\n  }\n}\n"],"names":["AbstractConnector","supportedChainIds","emitUpdate","update","emit","ConnectorEvent","emitError","error","emitDeactivate","EventEmitter","URI_AVAILABLE","UserRejectedRequestError","_this","name","constructor","message","_inheritsLoose","Error","getSupportedChains","rpc","Object","keys","map","k","Number","undefined","WalletConnectConnector","config","_this2","handleChainChanged","bind","handleAccountsChanged","handleDisconnect","_proto","chainId","this","accounts","account","walletConnectProvider","stop","removeListener","activate","_this4","enable","then","on","provider","wc","connected","createSession","length","uri","m","WalletConnectProvider","e","getProvider","getChainId","send","getAccount","deactivate","close","_this12$walletConnect"],"sourceRoot":""}